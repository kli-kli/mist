#!/usr/bin/env bash

name=""
context=""
config=""
java_args=""
jar=""
runner="local"

while [[ $# > 1 ]]
do
  key="$1"
  case ${key} in
    --name)
      name="$2"
      shift
      ;;

    --context)
      context="$2"
      shift
      ;;

    --config)
      config="$2"
      shift
      ;;

    --jar)
      jar="$2"
      shift
      ;;

    --run-options)
      run_options="$2"
      shift
      ;;

    --java-args)
      java_args="$2"
      shift
      ;;

    --docker-host)
      docker_host="$2"
      shift
      ;;

    --docker-port)
      docker_port="$2"
      shift
      ;;

    --runner)
      runner="$2"
      shift
      ;;
  esac
shift
done

function startWorker() {
    if [ "${name}" == '' ]
    then
        (>&2 echo "You must specify --name")
        exit 3
    fi

    if [ "${context}" == '' ]
    then
        (>&2 echo "You must specify --context")
        exit 3
    fi

    if [ "${config}" == '' ]
    then
        (>&2 echo "You must specify --config")
        exit 3
    fi

    if [ "${jar}" == '' ]
    then
        (>&2 echo "You must specify --jar")
        exit 3
    fi

    if [ "${SPARK_HOME}" == '' ]
    then
        (>&2 echo "You must specify SPARK_HOME env variable")
        exit 3
    fi

    export PYTHONPATH="$SPARK_HOME/python:`readlink -f ${SPARK_HOME}/python/lib/py4j*`:$PYTHONPATH"

    SPARK_SUBMIT="${SPARK_HOME}/bin/spark-submit"
    MAIN_CLASS="io.hydrosphere.mist.worker.Worker"
    DRIVER_JAVA_OPTIONS="-Dconfig.file=${config} -Dakka.roles.1=worker-${name} ${java_args}"

    exec $SPARK_SUBMIT --class $MAIN_CLASS --driver-java-options "$DRIVER_JAVA_OPTIONS" ${run_options} $jar $name $context
}

function startWorkerContainer() {
    if [ "${docker_host}" == 'localhost' ] || [ "${docker_host}" == '127.0.0.1' ]
    then
        export socket="--unix-socket /var/run/docker.sock"
    fi

    parentContainer=`curl -s -X GET $socket -H "Content-Type: application/json" http://${docker_host}:${docker_port}/containers/$HOSTNAME/json`
    containerName=`echo $parentContainer | jq -r '.Name'`
    image=`echo $parentContainer | jq -r '.Config.Image'`
    links="[\"$containerName:/master\"]"
    labels=`echo $parentContainer | jq -r '.Config.Labels'`
    config=`base64 -w 0 configs/docker.conf`
    request="{
        \"Image\":\"$image\",
        \"Cmd\": [
            \"worker\",
            \"$name\",
            \"$context\",
            \"$jar\",
            \"$config\",
            \"${run_options}\"
        ],
        \"Labels\": $labels,
        \"HostConfig\": {
            \"Links\": $links
        }
    }"

    containerId=`curl -s -X POST $socket -H "Content-Type: application/json" http://${docker_host}:${docker_port}/containers/create -d "$request" | jq -r '.Id'`
    curl -s -X POST $socket -H "Content-Type: application/json" http://${docker_host}:${docker_port}/containers/${containerId}/start
}

if [ "${runner}" == 'local' ]
then
     startWorker
elif [ "${runner}" == 'docker' ]
then
    startWorkerContainer
else
    (>&2 echo "runner arg $runnur is invalid")
    exit 3
fi
